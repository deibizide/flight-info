{"version":3,"sources":["components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","useState","inputValue","setInputValue","flightData","setFlightData","isLoading","setIsLoading","isError","setIsError","formatDate","date","dates","Date","year","getFullYear","month","getMonth","getDate","formatHour","getHours","getMinutes","className","type","placeholder","onChange","e","target","value","onClick","accessKey","process","flightIata","toUpperCase","url","fetch","then","res","json","data","length","setTimeout","catch","role","arrival","departure","flight_status","start","end","split","startDate","difference","getTime","hours","Math","floor","minutes","diff","scheduled","iata","terminal","gate","baggage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fc1b49f8.chunk.js","sourcesContent":["// react\nimport React, { Fragment, useState } from 'react';\n\nconst Search = () => {\n    const [inputValue, setInputValue] = useState('');\n    const [flightData, setFlightData] = useState(null);\n    // flag to handle delay on API response\n    const [isLoading, setIsLoading] = useState(false);\n    // flag to handle error\n    const [isError, setIsError] = useState(false);\n\n    const fetchFlightData = () => {\n        setIsLoading(true);\n        const endpoint = 'https://cors-anywhere.herokuapp.com/http://api.aviationstack.com/v1/flights';\n        // avoiding keeping the API key in the application's code\n        const accessKey = `access_key=${process.env.REACT_APP_ACCESS_KEY}`;\n        const flightIata = `flight_iata=${inputValue.toUpperCase()}`;\n\n        const url = `${endpoint}?${accessKey}&${flightIata}`;\n\n        fetch(url)\n            .then(res => res.json())\n            .then(res => {\n                //handle error if array is empty\n                if (res.data.length === 0) {\n                    setIsLoading(false);\n                    setIsError(true);\n                    setTimeout(() => {\n                        setIsError(false);\n                    }, 3000);\n                    return;\n                }\n                setFlightData(res.data[0]);\n                setIsLoading(false);\n            })\n            .catch(() => {\n                setIsLoading(false);\n                setIsError(true);\n            });\n    };\n\n    const formatDate = date => {\n        const dates = new Date(date);\n        const year = dates.getFullYear();\n        const month = dates.getMonth() + 1;\n        const day = dates.getDate();\n\n        return day + '-' + month + '-' + year + '/';\n    };\n\n    const formatHour = date => {\n        const dates = new Date(date);\n        const hours = dates.getHours();\n        const minutes = dates.getMinutes();\n        return hours + ':' + minutes;\n    };\n\n    // calculates the flight duration.\n    const diff = (start, end) => {\n        start = start.split(':');\n        end = end.split(':');\n        const startDate = new Date(0, 0, 0, start[0], start[1], 0);\n        const endDate = new Date(0, 0, 0, end[0], end[1], 0);\n        let difference = endDate.getTime() - startDate.getTime();\n        const hours = Math.floor(difference / 1000 / 60 / 60);\n        difference -= hours * 1000 * 60 * 60;\n        const minutes = Math.floor(difference / 1000 / 60);\n\n        return (hours < 9 ? '0' : '') + hours + ':' + (minutes < 9 ? '0' : '') + minutes;\n    };\n\n    return (\n        <Fragment>\n            <div className=\"search__container\">\n                <h1>Check Flight Status</h1>\n                <div className=\"search__input-fields m-2\">\n                    <input\n                        className=\"mr-3\"\n                        type=\"text\"\n                        placeholder=\"ex: F122\"\n                        onChange={e => setInputValue(e.target.value)}\n                    />\n                    <button className=\"btn btn-info\" onClick={fetchFlightData}>\n                        Search\n                    </button>\n                    {/* during API response */}\n                    {isLoading && (\n                        <div className=\"text-center\">\n                            <div className=\"spinner-border\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        </div>\n                    )}\n                </div>\n                {/* if there's any error, this should appear */}\n                {isError && (\n                    <div className=\"alert alert-danger\" role=\"alert\">\n                        Wrong flight number, please try again.\n                    </div>\n                )}\n                {flightData && flightData.arrival && flightData.departure && (\n                    <div className=\"search__flight-info animated fadeIn\">\n                        <div className=\"search__status\">\n                            <h2>\n                                Flight Status: <span>{flightData.flight_status}</span>\n                            </h2>\n                            <h2>\n                                Flight duration:{' '}\n                                <span>\n                                    {diff(\n                                        formatHour(flightData.departure.scheduled),\n                                        formatHour(flightData.arrival.scheduled)\n                                    )}{' '}\n                                    hours\n                                </span>\n                            </h2>\n                        </div>\n                        <div className=\"search__departure-arrival\">\n                            <div className=\"search__departure\">\n                                <h3>Departure</h3>\n                                <h5>\n                                    Airport: <span>{flightData.departure.iata}</span>\n                                </h5>\n                                <h5>\n                                    Arrival Time:\n                                    <span>\n                                        {formatDate(flightData.departure.scheduled)}{' '}\n                                        {formatHour(flightData.departure.scheduled)}\n                                    </span>\n                                </h5>\n                                <h5>\n                                    Terminal: <span>{flightData.departure.terminal}</span> Gate:\n                                    <span>\n                                        {flightData.departure.gate == null\n                                            ? 'Info is not available'\n                                            : flightData.departure.gate}\n                                    </span>\n                                </h5>\n                            </div>\n                            <div className=\"search__arrival\">\n                                <h3>Arrival</h3>\n                                <h5>\n                                    Airport: <span>{flightData.arrival.iata}</span>\n                                </h5>\n                                <h5>\n                                    Arrival Time:\n                                    <span>\n                                        {formatDate(flightData.arrival.scheduled)}{' '}\n                                        {formatHour(flightData.arrival.scheduled)}\n                                    </span>\n                                </h5>\n                                <h5>\n                                    Terminal: <span>{flightData.arrival.terminal}</span> Gate:\n                                    <span>\n                                        {flightData.arrival.gate === null\n                                            ? 'Info is not available'\n                                            : flightData.arrival.gate}\n                                    </span>\n                                </h5>\n                                <h5>\n                                    Baggage belt Nr:{' '}\n                                    <span>\n                                        {flightData.arrival.baggage === null\n                                            ? 'Info is not available'\n                                            : flightData.arrival.baggage}\n                                    </span>\n                                </h5>\n                            </div>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </Fragment>\n    );\n};\n\nexport default Search;\n","import React from 'react';\nimport Search from './components/Search';\nimport './app.sass';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Search />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}